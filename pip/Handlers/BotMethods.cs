using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Telegram.Bot;
using Telegram.Bot.Types;

namespace Handlers
{
    public static class BotMethods
    {
        private static readonly Dictionary<string, (string English, string Spanish)> Dictionary = new(StringComparer.OrdinalIgnoreCase)
        {
        { "–∫–Ω–∏–≥–∞", ("book", "libro") },
        { "–æ–∫–Ω–æ", ("window", "ventana") },
        { "—Å—Ç–æ–ª", ("table", "mesa") },
        { "—Å—Ç—É–ª", ("chair", "silla") },
        { "–¥–µ—Ä–µ–≤–æ", ("tree", "√°rbol") },
        { "—Ü–≤–µ—Ç", ("color", "color") },
        { "–≤–æ–¥–∞", ("water", "agua") },
        { "–æ–≥–æ–Ω—å", ("fire", "fuego") },
        { "–∑–µ–º–ª—è", ("ground", "tierra") },
        { "–≤–æ–∑–¥—É—Ö", ("air", "aire") },
        { "–¥–µ–Ω—å", ("day", "d√≠a") },
        { "–Ω–æ—á—å", ("night", "noche") },
        { "—Å–æ–ª–Ω—Ü–µ", ("sun", "sol") },
        { "–ª—É–Ω–∞", ("moon", "luna") },
        { "–∑–≤–µ–∑–¥–∞", ("star", "estrella") },
        { "–º–∞—à–∏–Ω–∞", ("car", "coche") },
        { "—à–∫–æ–ª–∞", ("school", "escuela") },
        { "—Ä–∞–±–æ—Ç–∞", ("work", "trabajo") },
        { "–¥–µ–Ω—å–≥–∏", ("money", "dinero") },
        { "–≤—Ä–µ–º—è", ("time", "tiempo") }
        };

        private static readonly HttpClient httpClient = new HttpClient();

        private static readonly Dictionary<long, (string Word, string CorrectAnswer)> QuizState = new();

        public static async Task HandleUpdateAsync(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
        {
            if (update.Message is not { Text: { } messageText } || update.Message.From is null)
                return;

            var chatId = update.Message.Chat.Id;
            var username = update.Message.From.Username ?? "—Ç—É–º–±—É—á–∫–∞";

            try
            {
                if (messageText == "/start")
                {
                    await SendMessage(botClient, chatId, $"–ü—Ä–∏–≤–µ—Ç, @{username}! –≠—Ç–æ—Ç –±–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ –∏—Å–ø–∞–Ω—Å–∫–∏–π, –∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.");
                    return;
                }

                if (messageText == "/author")
                {
                    await SendMessage(botClient, chatId, "–ê–≤—Ç–æ—Ä —à–∏–∫–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞: üî•@pnitkaüî• –ª—É—á—à–∞—è –ø—Ä–æ–≥—Ä–∞–º–∏—Å—Ç–∫–∞ –Ω–∞ —Å–≤–µ—Ç–µ –æ—Ç –ë–æ–≥–∞");
                    return;
                }

                if (messageText == "/quiz")
                {
                    var randomWord = Dictionary.Keys.ElementAt(new Random().Next(Dictionary.Count));
                    var quizTranslation = Dictionary[randomWord];

                    var isEnglish = new Random().Next(2) == 0;
                    var correctAnswer = isEnglish ? quizTranslation.English : quizTranslation.Spanish;

                    QuizState[chatId] = (randomWord, correctAnswer);

                    await SendMessage(botClient, chatId, $"–£–≥–∞–¥–∞–π –ø–µ—Ä–µ–≤–æ–¥ –∑–∞–¥—É–º–∞–Ω–Ω–æ–µ —à–∏–∫–∞—Ä–Ω–æ–π –¥–∞–º–æ–π:\n–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ \"{randomWord}\" –Ω–∞ {(isEnglish ? "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π" : "–∏—Å–ø–∞–Ω—Å–∫–∏–π")}?");
                    return;
                }

                if (QuizState.TryGetValue(chatId, out var quizData))
                {
                    var (word, correctAnswer) = quizData;

                    if (messageText.Equals(correctAnswer, StringComparison.OrdinalIgnoreCase))
                    {
                        await SendMessage(botClient, chatId, "üî•–ü–†–ê–í–ò–õ–¨–ù–û!üî• –¢—ã –ø—Ä–æ—Å—Ç–æ –æ–≥—É—Ä–µ—Ü!ü•í");
                    }
                    else
                    {
                        await SendMessage(botClient, chatId, $"‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û ‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correctAnswer}");
                    }
                    
                    QuizState.Remove(chatId);
                    return;
                }

                if (Dictionary.TryGetValue(messageText.Trim(), out var translation))
                {
                    await SendMessage(botClient, chatId, $"–ü–µ—Ä–µ–≤–æ–¥ —Å:\n –ê–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ: {translation.English}\n –ò—Å–ø–∞–Ω—Å–∫–æ–≥–æ: {translation.Spanish}");
                }
                else
                {
                    var russianTranslation = await TranslateTextAsync(messageText, "auto", "ru");
                    await SendMessage(botClient, chatId, $"–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —Å –∞–Ω–≥–ª –∏–ª–∏ –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ: {russianTranslation}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞: {ex.Message}");
                await SendMessage(botClient, chatId, "–û–®–ò–ë–ö–ê");
            }
        }

        static async Task SendMessage(ITelegramBotClient botClient, long chatId, string text)
        {
            await botClient.SendTextMessageAsync(chatId, text, cancellationToken: CancellationToken.None);
        }

        static async Task<string> TranslateTextAsync(string text, string sourceLang, string targetLang)
        {
            var url = $"https://translate.googleapis.com/translate_a/single?client=gtx&sl={sourceLang}&tl={targetLang}&dt=t&q={Uri.EscapeDataString(text)}";
            var response = await httpClient.GetStringAsync(url);

            var result = JsonSerializer.Deserialize<List<object>>(response);
            return result?[0]?.ToString()?.Split('"')[1] ?? "–û—à–∏–±–∫–∞: –ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞";
        }
    }
}